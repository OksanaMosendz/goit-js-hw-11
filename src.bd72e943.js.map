{"version":3,"sources":["js/01-color-switcher.js","js/03-promisses.js","index.js"],"names":["startBtn","document","querySelector","stopBtn","body","intervalId","getRandomHexColor","Math","floor","random","toString","startSwitch","setInterval","style","backgroundColor","disabled","stopSwitch","clearInterval","addEventListener","delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","username","map","user","table","randomIntegerFromInterval","min","max","makeTransaction","transaction","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":";;;AAAA,MAAMA,EAAWC,SAASC,cAAc,gBAClCC,EAAUF,SAASC,cAAc,eACjCE,EAAKH,SAASC,cAAc,QAClC,IAAIG,EAAW,EAEf,SAASC,IACC,UAAGC,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,MAG3D,MAAMC,EAAY,KAClBN,EAAWO,YAAY,KAAKR,EAAKS,MAAMC,mBAAmBR,OAAyB,KACnFN,EAASe,UAAW,GAGdC,EAAW,KACfC,cAAcZ,GACdL,EAASe,UAAW,GAGtBf,EAASkB,iBAAiB,QAAQP,GAClCR,EAAQe,iBAAiB,QAAQF;;ACdjC,MAAMG,EAAQC,GAEL,IAAIC,QAASC,IACfC,WAAW,KACZD,KAAWF,MACXA,KAIAI,EAASC,GAAQC,QAAQC,uBAAuBF,OAGtDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAMjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAWpBC,EAAkB,CAACC,EAAUC,IAC1B,IAAIb,QAASC,IAChBA,EAAQW,EAASE,IAAIC,GACrBA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,MAUnEJ,EAAgBH,EAAO,SAASD,KAAKF,QAAQW,OAC7CL,EAAgBH,EAAO,QAAQD,KAAKF,QAAQW,OAK5C,MAAMC,EAA4B,CAACC,EAAKC,IAC/BjC,KAAKC,MAAMD,KAAKE,UAAY+B,EAAMD,EAAM,GAAKA,GAGhDE,EAAmBC,IACjBvB,MAAAA,EAAQmB,EAA0B,IAAK,KAEtC,OAAA,IAAIjB,QAAQ,CAACC,EAAQqB,KAC1BpB,WAAW,KACUhB,KAAKE,SAAW,GAGjCa,EAAQ,CAAEsB,GAAIF,EAAYE,GAAInB,KAAMN,IAEpCwB,EAAOD,EAAYE,KAGpBzB,MAID0B,EAAa,EAAGD,GAAAA,EAAInB,KAAAA,MACxBC,QAAQC,mBAAmBiB,kBAAmBnB,QAG1CqB,EAAWF,IACflB,QAAQqB,qCAAqCH,+BAQ/CH,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOpB,KAAKiB,GAAYI,MAAMH,GAChEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOpB,KAAKiB,GAAYI,MAAMH;;AC5FhE,aAFA,QAAA,oBACA,QAAA,6BACA,QAAA","file":"src.bd72e943.js","sourceRoot":"../src","sourcesContent":["const startBtn = document.querySelector('[data-start]');\nconst stopBtn = document.querySelector('[data-stop]');\nconst body=document.querySelector('body');\nlet intervalId=0;\n\nfunction getRandomHexColor(){\n  return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n}\n\nconst startSwitch=()=>{\nintervalId=setInterval(()=>{body.style.backgroundColor=`${getRandomHexColor()}`;}, 1000);\nstartBtn.disabled = true;\n};\n\nconst stopSwitch=()=>{\n  clearInterval(intervalId);\n  startBtn.disabled = false;\n};\n\nstartBtn.addEventListener('click',startSwitch);\nstopBtn.addEventListener('click',stopSwitch);\n\n","// Подзадание 1\n\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд.\n//  Значением исполнившегося промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.\n\n\nconst delay = ms =>{\n\n  return new Promise((resolve)=>{\n       setTimeout(()=>{\n      resolve(`${ms}`);\n    },ms);})\n\n}\n\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\n\n// // Tests\ndelay(2000).then(logger); // Fulfilled after 2000ms\ndelay(1000).then(logger); // Fulfilled after 1000ms\ndelay(1500).then(logger); // Fulfilled after 1500ms\n\n\n// Подзадание 2\n// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback, а принимала всего два параметра allUsers и username и возвращала промис.\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: false },\n];\n\n// const toggleUserState = (allUsers, username, callback) => {\n//   const updatedUsers = allUsers.map(user =>\n//     user.name === username ? { ...user, active: !user.active } : user\n//   );\n\n//   callback(updatedUsers);\n// };\n\nconst toggleUserState = (allUsers, username) => {\n  return new Promise((resolve)=>{\n      resolve(allUsers.map(user =>\n      user.name === username ? { ...user, active: !user.active } : user));\n  })\n  \n};\n\n// // Currently the function works like this\n// toggleUserState(users, 'Mango', console.table);\n// toggleUserState(users, 'Ajax', console.table);\n\n// // The function should work like this\ntoggleUserState(users, 'Mango').then(console.table);\ntoggleUserState(users, 'Ajax').then(console.table);\n\n// Подзадание 3\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, а принимала всего один параметр transaction и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  return new Promise((resolve,reject)=>{\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({ id: transaction.id, time: delay });\n      } else {\n        reject(transaction.id);\n      }\n\n    }, delay);\n  })\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n// // Currently the function works like this\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n\n// // The function should work like this\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);","import './sass/main.scss';\nimport './js/01-color-switcher.js';\nimport './js/03-promisses.js';"]}